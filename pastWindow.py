# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'pastWindow.ui'
#
# Created by: PyQt5 UI code generator 5.15.10
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets

# 追加インポート
import matplotlib
import matplotlib.pyplot as plt
matplotlib.use('Qt5Agg')
from PyQt5.QtWidgets import QFileDialog
from matplotlib.backends.backend_qt5agg import FigureCanvasQTAgg
from matplotlib.figure import Figure
import seaborn as sns
import pandas as pd
import datetime
import sip

class MatplotlibCanvas(FigureCanvasQTAgg):
    """
    MatplotLibグラフオブジェクトクラス
    """
    def __init__(self, parent=None, width=8, height=9, dpi=120):
        fig, self.ax = plt.subplots(figsize=(width, height), dpi=dpi)
        super(MatplotlibCanvas, self).__init__(fig)

    def plot(self, df, columns, periodType, startDate, endDate):
        self.ax.clear()
        drawDf = df[startDate:endDate]
        for column in columns:
            if columns[column]:
                self.ax.plot(drawDf.index, drawDf[column], label=column, marker='o')
        self.ax.set_title('Title')
        self.ax.set_xlabel('Date')
        self.ax.set_ylabel('Value')
        self.ax.set_xlim([startDate, endDate])
        
        self.ax.set_yticks([1, 2, 3, 4, 5])
        self.ax.legend()
        self.ax.grid(True)
        
        labels = self.ax.get_xticklabels()
        plt.setp(labels, rotation=45, fontsize=8)
        
        # X軸ラベルが見切れるので調整
        plt.subplots_adjust(bottom=0.3)

        
    def setAxLim(self, startDate, endDate):
        self.ax.set_xlim([startDate, endDate])
        plt.xlim([startDate, endDate])
        
    def setAxLabel(self, startDate, periodType):
        xlabels = []
        if periodType == 'week':
            for i in range(6):
                xlabels.append(startDate + pd.DateOffset(days=i+1))
        else:
            tempDate = startDate
            while tempDate.month == startDate.month:
                xlabels.append(tempDate)
                tempDate += pd.DateOffset(days=6)  


class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(800, 500)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.comboBox = QtWidgets.QComboBox(self.centralwidget)
        self.comboBox.setGeometry(QtCore.QRect(690, 20, 80, 30))
        self.comboBox.setEditable(False)
        self.comboBox.setObjectName("comboBox")
        self.comboBox_2 = QtWidgets.QComboBox(self.centralwidget)
        self.comboBox_2.setGeometry(QtCore.QRect(690, 40, 80, 30))
        self.comboBox_2.setEditable(False)
        self.comboBox_2.setObjectName("comboBox_2")
        self.comboBox_3 = QtWidgets.QComboBox(self.centralwidget)
        self.comboBox_3.setGeometry(QtCore.QRect(690, 60, 80, 30))
        self.comboBox_3.setEditable(False)
        self.comboBox_3.setObjectName("comboBox_3")
        self.verticalLayoutWidget = QtWidgets.QWidget(self.centralwidget)
        self.verticalLayoutWidget.setGeometry(QtCore.QRect(30, 20, 570, 450))
        self.verticalLayoutWidget.setObjectName("verticalLayoutWidget")
        self.verticalLayout = QtWidgets.QVBoxLayout(self.verticalLayoutWidget)
        self.verticalLayout.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout.setObjectName("verticalLayout")
        spacerItem = QtWidgets.QSpacerItem(20, 270, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        self.verticalLayout.addItem(spacerItem)
        self.label = QtWidgets.QLabel(self.centralwidget)
        self.label.setGeometry(QtCore.QRect(620, 20, 61, 31))
        self.label.setObjectName("label")
        
        self.pushButton = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton.setGeometry(QtCore.QRect(650, 400, 121, 41))
        font = QtGui.QFont()
        font.setPointSize(13)
        self.pushButton.setFont(font)
        self.pushButton.setObjectName("pushButton")
        self.checkBox = QtWidgets.QCheckBox(self.centralwidget)
        self.checkBox.setGeometry(QtCore.QRect(640, 80, 90, 30))
        font = QtGui.QFont()
        font.setPointSize(11)
        self.checkBox.setFont(font)
        self.checkBox.setObjectName("checkBox")
        self.checkBox_2 = QtWidgets.QCheckBox(self.centralwidget)
        self.checkBox_2.setGeometry(QtCore.QRect(640, 120, 90, 30))
        font = QtGui.QFont()
        font.setPointSize(11)
        self.checkBox_2.setFont(font)
        self.checkBox_2.setObjectName("checkBox_2")
        self.checkBox_3 = QtWidgets.QCheckBox(self.centralwidget)
        self.checkBox_3.setGeometry(QtCore.QRect(640, 170, 90, 30))
        font = QtGui.QFont()
        font.setPointSize(11)
        self.checkBox_3.setFont(font)
        self.checkBox_3.setObjectName("checkBox_3")
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 800, 21))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)
        
        # グラフデータ関連の初期値
        self.canv = MatplotlibCanvas(self)
        self.df = []
        self.drawDf = []
        self.columns = {}
        self.periodType = 'month'
        
        # コンボボックスの初期設定
        today = datetime.date.today()
        self.comboWeekList = []
        self.comboBox.addItems(['2024', '2025'])
        self.comboBox_2.addItems(['1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12'])
        # 初期値を今日の日付に合わせる
        self.comboBox_2.setCurrentIndex(today.month-1)
        self.comboBox_3.addItem('全て')
        self.calcComboValues()
        
        self.comboBox.currentIndexChanged['QString'].connect(self.updateCombo_1_2)
        self.comboBox_2.currentIndexChanged['QString'].connect(self.updateCombo_1_2)
        self.comboBox_3.currentIndexChanged['QString'].connect(self.updateCombo_3)
        
        
    # "表示する週"コンボボックスの内容を更新する関数
    def calcComboValues(self):
        """「表示する週」コンボボックスの選択肢を更新する関数
        """
        self.clearComboValues()
        self.comboWeekList = []
        year = int(self.comboBox.currentText())
        month = int(self.comboBox_2.currentText())
        tempDate = pd.Timestamp(year=year, month=month, day=1)
        count = 1
        while tempDate.month == month:
            self.comboWeekList.append(str(count))
            count += 1
            tempDate += pd.DateOffset(weeks=1)
        self.comboBox_3.addItems(self.comboWeekList)
        
    def clearComboValues(self):
        """「表示する週」コンボボックスから「全て」以外を削除する
        """
        self.comboBox_3.setCurrentIndex(0)
        t = self.comboBox_3.count()
        for _ in range(t):
            self.comboBox_3.removeItem(1)
        
        
    def updateCombo_1_2(self, value):
        """年または月を変更したとき
        """
        self.drawDf = []
        year = int(self.comboBox.currentText())
        month = int(self.comboBox_2.currentText())
        self.calcComboValues()
        # print(self.comboBox.currentText())
        # print(self.comboBox_2.currentText())
        # print(self.comboBox_3.currentIndex())
        # "全て"選択時
        if self.comboBox_3.currentIndex() == 0:
            dateRange = self.getMonthRange(year=year, month=month)
            self.periodType = 'month'
        else:
            week = int(self.comboBox_3.currentText())
            dateRange = self.getWeekRange(year=year, month=month, weekOfMonth=week)
            self.periodType = 'week'
        self.drawPlt(startDate=dateRange['startDate'], endDate=dateRange['endDate'])
        # print(value)
        

    def updateCombo_3(self, value):
        """週を変更したとき
        """
        self.drawDf = []
        year = int(self.comboBox.currentText())
        month = int(self.comboBox_2.currentText())
        # print(self.comboBox.currentText())
        # print(self.comboBox_2.currentText())
        # print(self.comboBox_3.currentIndex())
        # "全て"選択時
        if self.comboBox_3.currentIndex() == 0:
            dateRange = self.getMonthRange(year=year, month=month)
            self.periodType = 'month'
        else:
            week = int(self.comboBox_3.currentText())
            dateRange = self.getWeekRange(year=year, month=month, weekOfMonth=week)
            self.periodType = 'week'
        self.drawPlt(startDate=dateRange['startDate'], endDate=dateRange['endDate'])
        # print(value)
        
        
    def drawPlt(self, startDate, endDate):
        """グラフ描画処理
        """
        # 描画クリア
        plt.clf()
        try:
            self.verticalLayout.removeWidget(self.canv)
            sip.delete(self.canv)
            self.canv = None
            #self.verticalLayout.removeItem(self.spacerItem)
        except Exception as e:
            print(e)
            pass
        
        # 再描画
        self.canv = MatplotlibCanvas(self)
        self.verticalLayout.addWidget(self.canv)
        self.canv.plot(df=self.df, columns=self.columns, periodType=self.periodType, startDate=startDate, endDate=endDate)
        self.canv.draw()
        
        
    
    def readCsv(self, filePath):
        """csvファイル読み込み
        """
        self.df = pd.read_csv(filePath, encoding='utf-8', parse_dates=['date']).fillna(0)
        self.df.set_index('date', inplace=True)
        # self.updateCombo(self.values[0])
        
    
    def getInitColumns(self):
        """カラム名を取得し初期値をセットする
        """
        keys = self.df.keys()
        for key in keys:
            self.columns[key] = True
            
            
    def drawInitPlt(self):
        """初期グラフを今日の日付に合わせて表示する
        """
        today = datetime.date.today()
        dateRange = self.getMonthRange(year=today.year, month=today.month)
        self.drawPlt(startDate=dateRange['startDate'], endDate=dateRange['endDate'])
        
        
    def getWeekRange(self, year, month, weekOfMonth):
        """指定された週の範囲を取得する
        """
        firstDayOfMonth = pd.Timestamp(year=year, month=month, day=1)
        
        # その月の最初の月曜日を見つける
        firstMonday = firstDayOfMonth + pd.DateOffset(days=(0 - firstDayOfMonth.weekday()))

        # 指定された週の開始日と終了日
        startDate = firstMonday + pd.DateOffset(weeks=weekOfMonth-1)
        endDate = startDate + pd.DateOffset(days=6)
        
        return {'startDate':startDate, 'endDate':endDate}
        
    
    def getMonthRange(self, year, month):
        """指定された月の範囲を取得する
        """
        startDate = pd.Timestamp(year=year, month=month, day=1)
        endDate = pd.Timestamp(year=year, month=month, day=1) + pd.DateOffset(months=1, days=-1)
        
        return {'startDate':startDate, 'endDate':endDate}
        
        

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.label.setText(_translate("MainWindow", "表示する月"))
        self.pushButton.setText(_translate("MainWindow", "前に戻る"))
        self.checkBox.setText(_translate("MainWindow", "CheckBox"))
        self.checkBox_2.setText(_translate("MainWindow", "CheckBox"))
        self.checkBox_3.setText(_translate("MainWindow", "CheckBox"))


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    
    ui.readCsv(filePath='test.csv')
    ui.getInitColumns()
    # drawDf = ui.getWeekRange(year=2024, month=4, weekOfMonth=1)
    ui.drawInitPlt()
    sys.exit(app.exec_())
